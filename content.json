{"meta":{"title":"I'm Here","subtitle":"给岁月以文明","description":"博客后花园，收集-整理-分享","author":"Welee","url":"https://blog.welee.space"},"pages":[{"title":"广告推广","date":"2016-07-26T04:57:31.000Z","updated":"2016-07-26T04:57:31.000Z","comments":false,"path":"ad/index.html","permalink":"https://blog.welee.space/ad/index.html","excerpt":"","text":"我是广告你来打我呀APP 推广：大波应用导航推广：网址导航软件推广：前方高能"},{"title":"","date":"2016-07-26T04:57:31.000Z","updated":"2016-07-26T04:57:31.000Z","comments":false,"path":"tags/index.html","permalink":"https://blog.welee.space/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Ghost博客升级流程","slug":"ghost-blog-update","date":"2016-07-26T07:28:46.000Z","updated":"2016-08-30T07:49:22.000Z","comments":true,"path":"ghost-blog-update/","link":"","permalink":"https://blog.welee.space/ghost-blog-update/","excerpt":"","text":"当前Ghost博客的升级仍然还要手动进行，本教程旨在让你的升级操作更平滑…… 准备升级前最好做以下准备工作： 备份通过导出工具创建一个json备份文件并复制content文件夹（文件夹下有主题和图片文件）。 检查重启操作根据首次安装运行Ghost的方式不同而不同。最普遍的重启命令是service ghost restart，但是如果你使用forever，命令可能会是forever restart index.js，或者如果你使用pm2的话，使用pm2 restart ghost。 当然，重启实际上是升级的最后一步，为什么要在这里安排这段，当然是为了给那些忘记了启动方式，然后最后出问题怪新版代码有问题的童鞋先上一课…… 考虑跨版本问题简单地说就是旧版和新版版本号跨度太大的话可能会有兼容性问题，这点参考官方升级说明。 升级下载1wget https://ghost.org/zip/ghost-0.8.0.zip 解压1unzip ghost-0.7.9.zip 删除旧文件定位到Ghost安装目录并删除core目录，这里包含绝大多数组成Ghost软件的文件，不要删除content目录。你也可以删除config.js文件，以及所有以.md和.json结尾的文件。不要删除你的config.js文件。其实可以留下这些文件，并通过新版复制过来直接覆盖的形式，重要的是删除core目录。 复制新文件core目录需要复制过来，index.js、’package.json’和’npm-shrinkwrap.json’也要确保替换。当然，你也可能想复制新版的.md文件比如README.md或PRIVACY.md以便用来处理它们包含的有用内容。 如果你使用的是默认主题Casper并且没有做改动，那么单独把新版的content/themes/casper目录复制过去也是不错的。 检查权限当然，这个还得看你安装的时候怎么运行的了。 更新依赖1npm install --production 如果出错可以尝试删除node_modules目录，运行npm cache clean并重试。 重启Ghost重启就好了。如果出问题，可以尝试使用官方的npm start --production方式启动然后检查错误信息等方式。 其他卧槽我编不下去了，详情可以参照官网，这是Ghost中文网的翻译。 ###","categories":[],"tags":[{"name":"Ghost","slug":"Ghost","permalink":"https://blog.welee.space/tags/Ghost/"}]},{"title":"Android版OpenVPN客户端的封装","slug":"openvpn-client-android","date":"2016-07-26T07:28:13.000Z","updated":"2016-08-30T07:49:22.000Z","comments":true,"path":"openvpn-client-android/","link":"","permalink":"https://blog.welee.space/openvpn-client-android/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"CentOS7部署ELK","slug":"elk","date":"2016-06-15T03:11:11.000Z","updated":"2016-07-26T04:57:31.000Z","comments":true,"path":"elk/","link":"","permalink":"https://blog.welee.space/elk/","excerpt":"","text":"ELK，Elasticsearch、Logstash、Kibana三个开源软件的集合，一般被运维狗拿来实时检索和分析日志数据。 参考文献推荐阅读 Elasticsearch分布式、零配置、自动发现、索引自动分片，索引副本机制，RESTful风格接口，多数据源，负载均衡……这是一个分布式搜索引擎 安装方式：官方英文参考 我们的服务器几乎都是CentOS7环境，人生苦短，我们就直接使用YUM安装吧： 首先导入公钥数字证书： 1rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch 然后添加yum源并安装： 123456789cat &gt;&gt;/etc/yum.repos.d/elasticsearch.repo&lt;&lt;EOF[elasticsearch-2.x]name=Elasticsearch repository for 2.x packagesbaseurl=http://packages.elastic.co/elasticsearch/2.x/centosgpgcheck=1gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearchenabled=1EOFyum install -y elasticsearch 安装后即可启动 1systemctl start elasticsearch #不能用root用户启动 测试启动是否成功 1234567891011121314curl -X GET http://localhost:9200/#正常情况会返回如下信息&#123; \"name\" : \"Black King\", \"cluster_name\" : \"elasticsearch\", \"version\" : &#123; \"number\" : \"2.3.3\", \"build_hash\" : \"218bdf10790eef486ff2c41a3df5cfa32dadcfde\", \"build_timestamp\" : \"2016-05-17T15:40:04Z\", \"build_snapshot\" : false, \"lucene_version\" : \"5.5.0\" &#125;, \"tagline\" : \"You Know, for Search\"&#125; 当然可以修改一些配置参数 1vim /etc/elasticsearch/elasticsearch.yml KibanaLogstash和ElasticSearch的前端，友好的日志分析Web界面，可以帮你汇总、分析和搜索重要数据日志。 安装方式：官方英文参考 我们已经导入过elasticsearch的证书了，此处可以直接添加YUM源并执行安装： 123456789cat &gt;&gt;/etc/yum.repos.d/kibana.repo&lt;&lt;EOF[kibana-4.5]name=Kibana repository for 4.5.x packagesbaseurl=http://packages.elastic.co/kibana/4.5/centosgpgcheck=1gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearchenabled=1EOFyum install -y kibana 安装后即可启动 1systemctl start kibana #这个也不能用root用户启动 防火墙可以处理一下，当然也可以用nginx转发等方式，此处略谈。 12sudo firewall-cmd --permanent --add-port 5601/tcpsudo firewall-cmd --reload 测试启动是否成功 1访问一下就好了嘛…… Logstash这个是用来收集和分析日志的。 安装方式：官方英文参考 已经导入过elasticsearch的证书了，现在直接添加YUM源并安装： 123456789cat &gt;&gt;/etc/yum.repos.d/logstash.repo&lt;&lt;EOF[logstash-2.3]name=Logstash repository for 2.3.x packagesbaseurl=https://packages.elastic.co/logstash/2.3/centosgpgcheck=1gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearchenabled=1EOFyum install -y logstash 测试一下 1sudo systemctl start logstash (前提是有一个可用的配置文件) OK，收工","categories":[],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://blog.welee.space/tags/Elasticsearch/"},{"name":"Logstash","slug":"Logstash","permalink":"https://blog.welee.space/tags/Logstash/"},{"name":"Kibana","slug":"Kibana","permalink":"https://blog.welee.space/tags/Kibana/"}]},{"title":"OpenVPN二次开发","slug":"openvpn-client-modify","date":"2016-04-27T03:11:11.000Z","updated":"2016-07-26T04:57:31.000Z","comments":true,"path":"openvpn-client-modify/","link":"","permalink":"https://blog.welee.space/openvpn-client-modify/","excerpt":"","text":"当前开发仓库主开发者库(GitHub)在OpenVPN 2.3-alpha1 之后OpenVPN项目架构中引入了几个重大改动，比如把几个大的代码块从主代码树上剥离成子项目。 openvpn: 一个常规开源项目，使用基于autotools的GNU构建系统并且和其他项目一样它的构建系统只用于自身的构建。 openvpn-build: 为了构建各种各样配置的OpenVPN而独立出来的一个项目。这个项目被分成以下几个部分： generic: 一个使用交叉编译的通用构建项目，包含完整的依赖关系。 msvc: 一个MSVC构建，使用微软自家的msbuild系统。 windows-nsis: 这是一个WIndows安装包生成器，使用通用组件利用mingw交叉编译构建后使用NSIS打包输出的文件。 tap-windows: Windows的TAP驱动（网络驱动器接口标准第5版）,就算OpenVPN不用，这玩意也是很实用的东西。 tap-windows6: Windows的TAP驱动（网络驱动器接口标准第6版）,这玩意很实用，不止是OpenVPN可以用到它。 easy-rsa: 用来生成SSL证书的脚本，这里当然是OpenVPN要用，当然这其实是一个很通用的程序，在其他场景也会用到。 大多数GitHub仓库的镜像都可以在SourceForge.net找到。 openvpn.git库的分支1234master -- 开发主分支，所有的新补丁都应当基于本分支release/2.1 -- 所有和2.1发行版相关的东西release/2.2 -- 所有和2.2发行版相关的东西release/2.3 -- 所有和2.3发行版相关的东西 发行版分支不会有任何活跃的功能改动，只会在发行后应用一些典型的bug修复。每个重大发布(2.X)都会释出一个新的发行版分支。所有的bug修复都应当基于主分支开发，将从主分支和合适的发行分支之间做合适的选择，以决定是否在小版本(2.1.X,2.2.X等)中修复。 大小版本的发行版同时也都加了标签, 并且可以使用以下git命令检查： 123$ git tag -l # 列出所有标签$ git tag -v &lt;tag name&gt; # 验证签名的标签$ git show &lt;tag name&gt; # 显示标签信息和提交时间点 更多详细开发进程可以点击这里查阅。 废弃的仓库openvpn-testing这个仓库并不经常被使用，尽管openvpn-testing.git的master分支与openvpn.gti的master分支保持同步。在openvpn-testing的git树上有很多分支，每个分支都单独跟踪不同的补丁。分支结构如下： 1234567891011master -- 这个和openvpn.git的master是完全相同的分支svn-branch/BETA21 -- 这个和James以前的SVN Beta21是一样的分支，不活跃。svn-branch/2.1 -- 这是James的2.1版SVN分支的git镜像，James做他的主要工作，会合并到主分支。release/2.1 -- 这只包含2.1发行版相关的源码(以前的released-2.1)release/2.2 -- 这只包含2.2发行版相关的源码(以前的beta-2.2)obsolete/* -- 废弃的分支&#123;featureX&#125; -- 只包含X特性的补丁&#123;featureY&#125; -- 只包含Y特性的补丁&#123;featureZ&#125; -- 只包含Z特性的补丁frp -- 正经历特性移除进程的特性experimental -- 和其他带有实验性特性的分支合并的主分支，只用于测试意图不用于开发。 开发者们如果要向分支贡献一些特性必须确保自己的分支定期基于主分支做rebase. 这同样适用于想看到他们的工作成果被采纳的开发维护git树的其他人员。”拥有”一个特性分支的开发者要向所有在那个分支的开发者负责。 在obsolete目录下的这些分支混杂着一些将不再被使用的分支，当然其中有一些可能有历史价值，只是被放在一边。还有时候是因为一些分支被合并到主分支并且现在已经主要在主分支开发了才被放到这里。当他们的历史参考价值不再那么明显的时候最终会被删除掉。 experimental分支是一个集所有在开发中和主分支下特性的分支。这个分支可能会不时地被完全重构。考虑到这个分支是一个”仅供参考和测试”的分支，不可以在这个分支下直接做开发。 获取最新的openvpn-testing树，使用 1git clone git://openvpn.git.sourceforge.net/gitroot/openvpn/openvpn-testing.git 你将会在这里获取到openvpn-testing目录。当进入这个目录默认会使用主分支，使用以下命令切换到实验分支 1git checkout -b experimental origin/experimental 使用以下命令查看所有的可用分支 1git branch -a 使用这个git树的experimental分支的你通常是希望用上”最新最好”的特性并且你愿意接受这些通常不怎么稳定的实验性代码。 James的SVN仓库James Yonan 曾经把他自己的SVN仓库托管在openvpn.net，但是在2013年末或2014年初这段时间下线了，取而代之的是James放到GitHub上的openvpn.git。残余的SVN仓库在openvpn-testing.git，SF.net上是可以看到的。 旧的CVS仓库对我们之中的老顽固我们提供旧的CVS树，当然已经被转换成为了一个不活跃的git树。这个树可以在这里浏览或本地下载： 1git clone git://openvpn.git.sourceforge.net/gitroot/openvpn/openvpn-historical-cvs.git 需要注意的是这个树上不会有新的开发活动了。","categories":[],"tags":[{"name":"OpenVPN","slug":"OpenVPN","permalink":"https://blog.welee.space/tags/OpenVPN/"}]},{"title":"Windows版OpenVPN客户端的封装","slug":"openvpn-client-windows","date":"2016-04-19T03:11:11.000Z","updated":"2016-07-26T04:57:31.000Z","comments":true,"path":"openvpn-client-windows/","link":"","permalink":"https://blog.welee.space/openvpn-client-windows/","excerpt":"","text":"OpenVPN官方跨平台编译系统之WindowsNSIS包封装 简介Windows-NSIS这个子目录包含了NSIS构建Windows版OpenVPN(32/64)的所有依赖及脚本文件。在../generic目录的脚本是用来构建组件的。查看更多帮助可以访问OpenVPN官方帮助页面 用法首先要配置编译环境， 可以通过编辑以下两个文件以实现永久变更 12../generic/build.vars (编译配置)build-complete.vars (包配置) 也可以通过shell变量的方式临时变更编译配置(下文中会提到) 创建一个未签名的发行包可以使用以下命令 1./build-complete 使用shell变量的配置优先级更高 12NDOWS_INSTALLER_URL=http://domain.com/tap.exe\\./build-complete 从Git源创建一个签名的快照，可以使用”build-snapshot”: 1234./build-snapshot --sign --sign-pkcs12=signingkey.p12\\ --sign-pkcs12-pass=yourpassphrase\\ --sign-timestamp=&quot;http://timestamp.domain.com&quot; 或者使用”build-complete”做一个发行版本的包 1234./build-complete --sign --sign-pkcs12=signingkey.p12\\ --sign-pkcs12-pass=yourpassphrase\\ --sign-timestamp=&quot;http://timestamp.domain.com&quot; 缓存多数的构建时间都花在构建依赖上，所以有关依赖缓存的特性可以让你在初次构建后复用已经用过的依赖。当只有OpenVPN的components变化的时候，这样的特性可以大大减少构建时间。 注意不要盲目地使用构建的缓存特性解包而不管构建结果，包括版本和任何安装选项特性。 创建初始的包缓存，首先要运行 1./build-complete --build-depcache 这样会创建一个针对Windows的依赖关系缓存，当然是包括32位和64位的。一旦缓存创建完毕，以后的构建就可以像下面这样重利用了： 1./build-complete --use-depcache 这些选项没有值并且缓存目录存在../generic/这里。","categories":[],"tags":[{"name":"OpenVPN","slug":"OpenVPN","permalink":"https://blog.welee.space/tags/OpenVPN/"}]},{"title":"OpenVPN客户端的封装","slug":"openvpn-client","date":"2016-04-19T03:11:11.000Z","updated":"2016-07-26T04:57:31.000Z","comments":true,"path":"openvpn-client/","link":"","permalink":"https://blog.welee.space/openvpn-client/","excerpt":"","text":"OpenVPN官方跨平台编译系统简介 简介这堆文件包含了一些辅助脚本和各个硬件平台及操作系统(比如Windows、ARM)的依赖包。如果你在类Unix系统上构建OpenVPN则不需要这些脚本。查看更多帮助可以访问OpenVPN官方帮助页面 目录“generic”子目录包含了交叉编译OpenVPN脚本(使用mingw_w64)(比如Linux-&gt;Windows) “msvc”子目录可以被用来在Windows上使用Microsoft Visual Studio工具编译WIndows版OpenVPN。请注意这玩意以后不会积极维护了。 “windows-nsis”子目录包含了交叉编译Windows版本OpenVPN的脚本。 请参考子目录的README文件以获取更多信息。","categories":[],"tags":[{"name":"OpenVPN","slug":"OpenVPN","permalink":"https://blog.welee.space/tags/OpenVPN/"}]},{"title":"OpenVPN服务安装配置简明教程","slug":"openvpn","date":"2016-04-17T03:11:11.000Z","updated":"2016-07-26T04:57:31.000Z","comments":true,"path":"openvpn/","link":"","permalink":"https://blog.welee.space/openvpn/","excerpt":"","text":"OpenVPN概念VPN，即Virtual Private Networking，虚拟专用网络，而OpenVPN则是一套能让不同局域网下的机器之间建立安全隧道的解决方案。 本文要讲什么在CentOS7上安装和配置OpenVPN，涉及到的系统相关名词有rpm、yum、firewalld等。 配置服务端CentOS7默认源里木有OpenVPN，所以我们首先要添加EPEL的源。 1rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm 使用Yum安装OpenVPN和easy-rsa包（后者用于签发证书） 1yum install openvpn easy-rsa 为了防止升级easy-rsa包时你的改动被覆盖掉，把生成证书的脚本拷贝到/etc/openvpn/easy-rsa/目录。 1rsync -av /usr/share/easy-rsa/2.0/ /etc/openvpn/easy-rsa/ 进入easy-rsa目录并且根据你的需求编辑vars文件 12cd /etc/openvpn/easy-rsa/ vim /etc/openvpn/easy-rsa/vars 12345678export KEY_COUNTRY=\"CN\" export KEY_PROVINCE=\"BJ\" export KEY_CITY=\"BeiJing\" export KEY_ORG=\"Weformation LTD\" export KEY_EMAIL=\"admin@cnwelee.me\" export KEY_CN=cnwelee.me export KEY_NAME=server export KEY_OU=server 下面我们需要使用esay-rsa目录下的脚本们来生成必要文件 调用vars 1../vars 清空keys目录 1./clean-all 生成服务端证书和密钥 1./build-key-server server 生成Diffie-Hellman 参数 .pem文件 1./build-dh 生成第一个客户端密钥 1./build-key client1 重复这一步可以为每个需要连接本OpenVPN服务器的客户端生成密钥。 复制所有生成的服务器端文件到/etc/openvpn目录 1cp /etc/openvpn/easy-rsa/keys/&#123;dh2048.pem,ca.crt,server.crt,server.key&#125; /etc/openvpn/ OpenVPN附带一个服务端配置示例文档，我们会以它为模板进行修改。首先把它拷过来： 1cp /usr/share/doc/openvpn-2.3.8/sample/sample-config-files/server.conf /etc/openvpn/ 现在我们来编辑server.conf文件，因为我们使用2048位的密钥所以我们修改dh dh1024.pem为dh dh2048.pem: 1sed -i 's/dh dh1024.pem/dh dh2048.pem/' /etc/openvpn/server.conf 为了让客户端的流量可以通过服务器，把redirect-gateway选项的注释去掉 1sed -i '/redirect-gateway/s/^;//' /etc/openvpn/server.conf 推送DNS服务器到客户端（默认是OpenDNS）: 1sed -i &apos;/dhcp-option/s/^;//g&apos; /etc/openvpn/server.conf 把user nobody和group nobody的注释去掉，这样可以以较少的权限运行OpenVPN 1sed -i '/nobody/s/^;//g' /etc/openvpn/server.conf 现在我们可以使用以下命令开启OpenVPN服务了 1systemctl start openvpn@server.service 使用以下命令让openvpn服务开机启动 1systemctl enable openvpn@server.service 通过VPN对客户端的流量（客户端想访问互联网）进行路由 服务端必须要开启IPv4包转发功能（服务器上多个网卡接口之间转发IPv4的包）。查看是否开启： 1cat /proc/sys/net/ipv4/ip_forward 如果输出是1则说明开启了，是0的话就运行以下命令进行开启 12echo \"net.ipv4.ip_forward = 1\" &gt;&gt; /etc/sysctl.confsysctl -p 下面我们配置防火墙规则 123456firewall-cmd --permanent --add-service openvpnfirewall-cmd --permanent --zone=trusted --add-interface=tun0firewall-cmd --permanent --zone=trusted --add-masqueradeDEV=$(ip route get 8.8.8.8 | awk 'NR==1 &#123;print $(NF-2)&#125;')firewall-cmd --permanent --direct --passthrough ipv4 -t nat -A POSTROUTING -s 10.8.0.0/24 -o $DEV -j MASQUERADEfirewall-cmd --reload 配置客户端无论你使用什么操作系统，都需要传输./build-key脚本生成的client1.key密钥和client1.crt证书，以及证书签发机构认证的ca.crt文件到客户机。你可以通过SSH使用SFTP\\FTP或Rsync来传输。我们还需要创建一个client1.ovpn文件，内容如下： 123ls **YOUR_SERVER_IP_ADDRESS** 1194dev tunproto udpresolv-retry infinitenobindpersist-keypersist-tunverb 3key client1.keyca ca.crtcert client1.crtcomp-lzo Linux安装最新版OpenVPN 123sudo yum install openvpn # CentOS &amp;&amp; Fedora sudo apt-get install openvpn # Debian &amp;&amp; Ubuntu &amp;&amp; Mint sudo pacman -S openvpn # ArchLinux 创建一个新目录mkdir ~/.openvpn并且把client1.ovpn，client1.key，client1.crt和ca.crt拷贝进去，使用如下命令开启OpenVPN服务 1sudo openvpn --config ~/.openvpn/client1.ovpn 注意这目录取决于你的Linux发行版本，你也可以通过GUI工具配置你的OpenVPN客户端。 Windows下载并安装最新版客户端，把client1.ovpn，client1.key，client1.crt和ca.crt拷贝到C:\\Program Files\\OpenVPN\\config目录 Mac OS下载并安装最新版本tunnelblick，拷贝client1.ovpn,client1.key,client1.crt和ca.crt到Downloads目录.打开应用并找到 “OpenVPN Configuration(s)” ，然后根据屏幕提示操作即可。","categories":[],"tags":[{"name":"OpenVPN","slug":"OpenVPN","permalink":"https://blog.welee.space/tags/OpenVPN/"}]}]}